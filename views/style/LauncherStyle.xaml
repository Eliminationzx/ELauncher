<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Path x:Key="Close" Stroke="#FFA9DDFD" StrokeThickness="1.5" Stretch="None" Data="M0,0 L8,8 M0,8 L8,0" />

    <Style x:Key="SimpleButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid" Opacity="1">
                        <Border x:Name="Border" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="#02000000">
                        </Border>
                        <!--<TextBlock x:Name="ContentText" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto"/>-->
                        <ContentPresenter x:Name="ContentText" Width="Auto" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" OpacityMask="Black"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="0.6" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Простая кнопка повторения (SimpleRepeatButton) используется простой полосой прокрутки (SimpleScrollBar) для кнопок "Вверх" и "Вниз" -->
    <Style x:Key="SimpleRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="#FFDFDFDF"/>
        <Setter Property="BorderBrush" Value="#FFDFDFDF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource CLSBtn}"/>
                        <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource CLSBtnHover}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Простой ползунок: ползунок (Thumb) — перетаскиваемый элемент полосы прокрутки (Scrollbar) -->
    <Style x:Key="SimpleThumbStyle" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Margin="0,0,0,0" x:Name="Grid">
                        <Border HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" MinHeight="0" Background="#4CFFFFFF" CornerRadius="7"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#7FFFFFFF" TargetName="Rectangle"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False"/>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" Value="#66FFFFFF" TargetName="Rectangle"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль "Простая кнопка повторения" (SimpleScrollRepeatButtonStyle): эта кнопка повторения (RepeatButton) используется над и под ползунком в полосе прокрутки. Они настраиваются прозрачными, чтобы их не было видно поверх полосы прокрутки -->
    <Style x:Key="SimpleScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" RadiusX="1" RadiusY="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Простая полоса прокрутки (SimpleScrollBar) использует элементы SimpleThumb, SimpleRepeatButton и SimpleScrollRepeatButton -->

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="#33000000" ClipToBounds="True" >
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" Height="0"/>
                            <!--<RowDefinition Height="2"/>-->
                            <RowDefinition Height="*"/>
                            <!--<RowDefinition Height="2"/>-->
                            <RowDefinition MaxHeight="18" Height="0"/>
                        </Grid.RowDefinitions>



                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand" Height="Auto" VerticalAlignment="Stretch" Margin="2,0">
                            <Grid>
                                <Path x:Name="DecreaseArrow" Stroke="#7F2B2B2B" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z" Fill="LightGray"/>
                            </Grid>
                        </RepeatButton>

                        <!-- Дорожка (Track) — это особый контейнер для компоновки, который задает размеры ползунка и кнопок повторения, которые осуществляют прокрутку в одну или в другую сторону -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}" Margin="2" Height="Auto" MinHeight="10" VerticalAlignment="Stretch"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>

                        </Track>

                        <RepeatButton Grid.Row="3" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand" Margin="1.8,0,1.8,0">
                            <Grid>
                                <Path x:Name="IncreaseArrow" Stroke="#7F2b2b2b" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z" Fill="#FFD3D3D3"/>
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!-- Этот раздел использует единый шаблон для полосы прокрутки (ScrollBar) и поворачивает его в горизонтальное положение (Horizontal)
                    Он также изменяет команды, чтобы команды "Вверх" и "Вниз" заменялись командами "Влево" и "Вправо" -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Поворот полосы прокрутки (ScrollBar) из вертикального в горизонтальное положение -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>

                            <!-- Дорожка (Track) имеет внутреннюю привязку к ориентации (Orientation), поэтому необходимо повернуть ее обратно в вертикальное положение (Vertical) -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                            <!-- Изменение команд для их выполнения при горизонтальном положении -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="NewsBox" TargetType="{x:Type TextBoxBase}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="0">
            <Border.Effect>
                <DropShadowEffect BlurRadius="50" Opacity="0.25" ShadowDepth="0"/>
            </Border.Effect>
            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!-- Данный элемент управления Border — это дорожка. Ему должно быть присвоено имя PART_Track -->
                        <Border x:Name="PART_Track" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" ClipToBounds="True" Margin="0,4,0,4" Background="#0CFFFFFF" BorderBrush="#33FFFFFF"/>

                        <Border MinWidth="1" x:Name="PART_Indicator" HorizontalAlignment="Left" BorderThickness="0" CornerRadius="0.5" Width="Auto" Margin="1,5,1,5" Background="{TemplateBinding Foreground}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressBarMedia" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!-- Данный элемент управления Border — это дорожка. Ему должно быть присвоено имя PART_Track -->
                        <Border x:Name="PART_Track" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" ClipToBounds="True" Margin="0,4,0,4" Background="#0CFFFFFF" BorderBrush="#33FFFFFF"/>

                        <Border MinWidth="1" x:Name="PART_Indicator" HorizontalAlignment="Left" BorderThickness="0" CornerRadius="0.5" Width="Auto" Margin="1,5,1,5" Background="{TemplateBinding Foreground}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, ElementName=media_canvas}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border"
                        Background="#7F1F232C"
                        BorderBrush="#26969696"                       
                        BorderThickness="1"
                        CornerRadius="5"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}">
                        <ContentPresenter
                            Margin="4" 
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top" >

                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius" Value="3"/>
                            <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="#FF363636"/>
        <Setter Property="TextDecorations" Value="None"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#ffe22c14"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>


















    <!--Control colors.-->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">White</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">#FF80d6af</Color>
    <Color x:Key="ControlMediumColor">#FF3bb57d</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FFB26823</Color>
    <Color x:Key="ControlPressedColor">#FF7c5707</Color>


    <Color x:Key="GlyphColor">#FF333333</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FF2d8b6f</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF2d8b6f</Color>

    <Color x:Key="PressedBorderLightColor">#FF73451c</Color>
    <Color x:Key="PressedBorderDarkColor">#FF401f02</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>



    <Style x:Key="Check"
       TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                    Width="13"
                    Height="13"
                    CornerRadius="0"
                    BorderThickness="1">
                                <Border.BorderBrush>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF633B1B" Offset="0"/>
                                        <GradientStop Color="#FF472408" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0"
                                     EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#FFB26823" />
                                                <GradientStop Color="#FF633910"
                                    Offset="1" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                                <Grid>
                                    <Path Visibility="Collapsed"
                      Width="7"
                      Height="7"
                      x:Name="CheckMark"
                      SnapsToDevicePixels="False"
                      StrokeThickness="2"
                      Data="M 0 0 L 7 7 M 0 7 L 7 0">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{DynamicResource ContentAreaColorLight}" />
                                        </Path.Stroke>
                                    </Path>
                                    <Path Visibility="Collapsed"
                      Width="7"
                      Height="7"
                      x:Name="InderminateMark"
                      SnapsToDevicePixels="False"
                      StrokeThickness="2"
                      Data="M 0 7 L 7 0">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{DynamicResource ContentAreaColorLight}" />
                                        </Path.Stroke>
                                    </Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlMouseOverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource PressedBorderDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource PressedBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <LinearGradientBrush x:Key="BtnPlay" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF0f99d9" Offset="0"/>
        <GradientStop Color="#FF0177af" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BtnPlayHover" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF36bffe" Offset="0"/>
        <GradientStop Color="#FF0298de" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BtnPlayPressed" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF0d83b8" Offset="0"/>
        <GradientStop Color="#FF00618e" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="PlayButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="Foreground" Value="White">

        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid" Opacity="1">
                        <Border x:Name="Border"  BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Width="Auto" CornerRadius="5" Background="{DynamicResource BtnPlay}"/>
                        <!--<TextBlock x:Name="ContentText" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto"/>-->
                        <ContentPresenter x:Name="ContentText" Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Grid>


                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BtnPlayHover}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BtnPlayPressed}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource BtnPlay}" TargetName="Border"/>
                            <Setter Property="Opacity" Value="0.20" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpansionPickerButton" TargetType="{x:Type RadioButton}" BasedOn="{x:Null}">
        <Setter Property="Foreground" Value="White">

        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="Grid" Opacity="1">
                        <Border x:Name="Border_outer" BorderThickness="0.5" BorderBrush="#FF00AEFF" Visibility="Hidden">
                            <Border x:Name="Border_inner" Opacity="0.20" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Width="auto" Background="{DynamicResource BtnPlay}"/>
                        </Border>
                        <!--<TextBlock x:Name="ContentText" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto"/>-->
                        <ContentPresenter x:Name="ContentText" Margin="5"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BtnPlayHover}" TargetName="Border_inner"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="Border_outer"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BtnPlayPressed}" TargetName="Border_inner"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="Border_outer"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource BtnPlay}" TargetName="Border_inner"/>
                            <Setter Property="Opacity" Value="0.20" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LinkButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"  BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Width="Auto" CornerRadius="0" Background="#02000000" />
                        <!--<TextBlock x:Name="ContentText" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto"/>-->
                        <ContentPresenter x:Name="ContentText"
                            Margin="{TemplateBinding Padding}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True">

                        </ContentPresenter>
                    </Grid>


                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect" TargetName="ContentText" >
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="0" BlurRadius="20" Color="#33FFFFFF"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Opacity" Value="1" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="0.60" TargetName="Grid"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Effect" TargetName="ContentText" >
                                <Setter.Value>
                                    <DropShadowEffect BlurRadius="0" ShadowDepth="0" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.40" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>